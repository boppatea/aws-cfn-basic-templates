---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template EC2: This template creates a memcached cluster & its security group.
  Cluster is placed within a 'data subnet', communicating with Wordpress instances.
Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  AvailabilityZones:
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
    Description: The list of AZIds that ensures high availability of all instances within the Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be a list of at least two existing availability zones that reside in the selected Virtual Private Cloud.
  DataSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of SubnetIds that hold the RDS & Redis instances in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud. 
  ClusterName:
    Default: memcachedcluster
    Description: The Memcached Cluster name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  MemcachedClass:
    Description: Memcached cluster class
    Type: String
    Default: cache.t2.micro
    AllowedValues:
    - cache.m5.large
    - cache.m5.xlarge
    - cache.m5.2xlarge
    - cache.m5.4xlarge
    - cache.m5.12xlarge
    - cache.m5.24xlarge
    - cache.m4.large
    - cache.m4.xlarge
    - cache.m4.2xlarge
    - cache.m4.4xlarge
    - cache.m4.10xlarge
    - cache.t2.micro
    - cache.t2.small
    - cache.t2.medium
    - cache.r5.large
    - cache.r5.xlarge
    - cache.r5.2xlarge
    - cache.r5.4xlarge
    - cache.r5.12xlarge
    - cache.r5.24xlarge
    - cache.r4.large
    - cache.r4.xlarge
    - cache.r4.2xlarge
    - cache.r4.4xlarge
    - cache.r4.8xlarge
    - cache.r4.16xlarge  
Resources:
  MemcachedCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties: 
      AZMode: cross-az
      CacheNodeType: 
        Ref: MemcachedClass
      CacheSubnetGroupName: 
        Ref: DataSubnets
      ClusterName: 
        Ref: ClusterName
      Engine: memcached
      NumCacheNodes: 2
      Port: 11211
      PreferredAvailabilityZones: 
        - Ref: AvailabilityZones
      Tags: 
        - Key: Name
          Value: MemcachedCluster
      VpcSecurityGroupIds: 
        - MemcachedSecurityGroup
  MemcachedSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open memcached cluster for access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '11211'
        ToPort: '11211'
        SourceSecurityGroupId:
          Ref: WebServerSecurityGroup
      VpcId:
        Ref: VpcId
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer
        + SSH access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        # SourceSecurityGroupId:
        #   Fn::Select:
        #   - 0
        #   - Fn::GetAtt:
        #     - ApplicationLoadBalancer
        #     - SecurityGroups
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      VpcId:
        Ref: VpcId